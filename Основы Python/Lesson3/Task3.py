"""
ЗАДАНИЕ 3
Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников
и возвращающую словарь, в котором ключи — первые буквы имён, а значения — списки, содержащие имена,
начинающиеся с соответствующей буквы.
Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется сортировка по ключам?
Можно ли использовать словарь в этом случае?
"""


def thesaurus(*args: str, is_sort: bool = False):
    dict_name = {}  # словарь, который возвращает функция
    list_name = []  # список значений (имен), отвечающий определенному ключу в словаре

    # обход списка аргументов
    for i in args:
        if i[0] in dict_name:  # проверяем, наличие ключа (первый символ аргумента) в словаре
            # расширяем список имен значением по ключу
            list_name.extend(dict_name.get(i[0]))
            # добавляем в список новое имя
            list_name.append(i)
            # ложим в значение по ключу копию списка
            dict_name[i[0]] = list_name[:]
        else:
            dict_name[i[0]] = [i]
        list_name.clear()

    # сортировка по ключам
    if is_sort:
        sort_dict = {}
        sort_list = sorted(dict_name.keys())  # создаем список отсортированных ключей
        # проходим список sort_list в цикле и собираем новый словарь
        for value in sort_list:
            sort_dict[value] = dict_name.get(value)
        dict_name = sort_dict

    return dict_name


names = ["Иван", "Мария", "Прокофий", "Максим", "Петр", "Александр", "Илья", "Ибрагим", "Моника", "Игорь"]
print(f'{"Несортированный словарь":-^100}\n {thesaurus(*names, is_sort=False)}')
print(f'{"Сортированный словарь":-^100}\n {thesaurus(*names, is_sort=True)}')
